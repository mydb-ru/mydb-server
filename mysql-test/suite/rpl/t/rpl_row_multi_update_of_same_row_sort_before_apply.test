# Bug#115741 Test whether setting slave_rows_search_algorithms to HASH_SCAN works properly
# when multiple updates are targeted to the same row within a single update rows log event

--source include/have_binlog_format_row.inc
--source include/rpl/set_privilege_checks_user_as_system_user.inc
--source include/rpl/init_source_replica.inc

--source include/rpl/connection_replica.inc

# Scenarios considered in this test case involve a table with no primary key but an index on the column
# When slave_rows_search_algorithms is set to HASH_SCAN, a list "m_distinct_keys" is created internally
# to store the unique key values which, later will be used to perform a table scan to apply the events
# for the rows present in the table.
--source include/rpl/connection_source.inc
# Create a table, with no primary key and an index.
CREATE TABLE t1 (i INT, INDEX t1_i(i));

# Scenario no.1
# Sorting the elements of m_distinct_keys doesn't alter the original order of updates
# Create a stored function so that only one Update_rows_log_event is generated.
--delimiter |
CREATE FUNCTION f1 () RETURNS INT BEGIN
  UPDATE t1 SET i = 11 WHERE i = 10;
  UPDATE t1 SET i = 12 WHERE i = 11;
  RETURN 0;
END|
--delimiter ;
--source include/rpl/sync_to_replica.inc

--source include/rpl/connection_source.inc
INSERT INTO t1 VALUES (10);
SELECT f1();

--source include/rpl/sync_to_replica.inc
--let $assert_text= 'There is only one row in table t1'
--let $assert_cond= [SELECT COUNT(*) FROM t1] = 1
--source include/assert.inc

--source include/rpl/connection_source.inc

# Verify that there is no difference between tables of master and slave.
--let diff_tables=master:test.t1, slave:test.t1
--source include/diff_tables.inc


# Scenario no.2
# Sorting the elements of m_distinct_keys ALTERs the original order of updates causing
# the case where the key value from the list doesn't exist in the table yet until other
# UPDATEs are executed.
--delimiter |
CREATE FUNCTION f2 () RETURNS INT BEGIN
  UPDATE t1 SET i = 11 WHERE i = 12;
  UPDATE t1 SET i = 13 WHERE i = 11;
  RETURN 0;
END|
--delimiter ;
--source include/rpl/sync_to_replica.inc

--source include/rpl/connection_source.inc
SELECT f2();

--source include/rpl/sync_to_replica.inc
--let $assert_text= 'There is only one row in table t1'
--let $assert_cond= [SELECT COUNT(*) FROM t1] = 1
--source include/assert.inc

--source include/rpl/connection_source.inc

# Verify that there is no difference between tables of master and slave.
--let diff_tables=master:test.t1, slave:test.t1
--source include/diff_tables.inc

# Cleanup
--source include/rpl/connection_source.inc
SELECT * FROM t1;
DROP FUNCTION f1;
DROP FUNCTION f2;
DROP TABLE t1;

--source include/rpl/connection_replica.inc
--source include/rpl/deinit.inc
