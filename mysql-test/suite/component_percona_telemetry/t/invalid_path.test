# Test that Percona Telemetry Component doesn't do any harm to the server when it is not possible
# to store telemetry file

--source include/have_percona_telemetry.inc
--source include/force_restart.inc

--let $telemetry_root_dir = $MYSQL_TMP_DIR/telemetry_dir
--let $grace_interval = 30
--let $scrape_interval = 30
--let $history_keep_interval = 80


# restart the server with custom telemetry file path and timeouts
--let $restart_parameters = "restart:--percona_telemetry.grace_interval=$grace_interval --percona_telemetry.scrape_interval=$scrape_interval --percona_telemetry.history_keep_interval=$history_keep_interval --percona_telemetry.telemetry_root_dir=$telemetry_root_dir"
--replace_regex /telemetry_root_dir=.*telemetry_dir/telemetry_root_dir=<telemetry_root_dir>/
--source include/restart_mysqld.inc

# Wait for more than grace_interval. Component should try to create the telemetry file, but as the target dir
# doesn't exist it will fail. It should complain with a warning in the log, but continue.
--let $timeout = `select $grace_interval + 20`
--sleep $timeout
--echo Server should still be alive

--let $warning_message = Component percona_telemetry reported: 'Problem during telemetry file write: filesystem error: directory iterator cannot open directory: No such file or directory
--eval CALL mtr.add_suppression("$warning_message")
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_select = $warning_message
--let $assert_count=1
--let $assert_text = Percona Telemetry Component warns about nonexistent directory
--source include/assert_grep.inc


# Now create the telemetry dir and wait for scrape_interval. Telemetry file should be created
--mkdir $telemetry_root_dir

--let $timeout = $scrape_interval
--sleep $timeout
--echo Telemetry root dir should contain 1 file
--exec ls -1 $telemetry_root_dir | wc -l

# cleanup
--force-rmdir $telemetry_root_dir
